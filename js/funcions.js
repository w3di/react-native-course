// В JavaScript функции — это ключевой механизм для написания повторно используемого кода. Они позволяют группировать логику, чтобы потом вызывать её по имени. Рассмотрим обычные функции и стрелочные функции, а также их различия.

// Обычные функции
// Обычная функция определяется с использованием ключевого слова function. Она может иметь имя или быть анонимной (без имени).

// Пример:

{
  function sayHello() {
    console.log("Hello!");
  }

  sayHello(); // Вызов функции, выведет: "Hello!"
}

// Или стрелочная функция, присваиваемая переменной:

{
  const greet = (name) => {
    console.log(`Hello, ${name}!`);
  };

  greet("Alice"); // Выведет: "Hello, Alice!"
}

// Обычные функции:

// Имеют собственное ключевое слово this, которое зависит от того, как вызвана функция (например, через объект или просто вызовом).
// Можно вызывать через их имя или присваивать переменным.
// Можно использовать в качестве методов объектов.
// Стрелочные функции
// Стрелочная функция — это более компактный способ записи функций, введённый в ES6 (2015). Используется стрелка =>.

// Пример:

{
  const sayHello = () => {
    console.log("Hello!");
  };
  sayHello(); // Выведет: "Hello!"
}
// Или с аргументами:

{
  const greet = (name) => {
    console.log(`Hello, ${name}!`);
  };
  greet("Alice"); // Выведет: "Hello, Alice!"
}
// Когда функция короткая, можно упростить:

// Если один аргумент — можно опустить круглые скобки:

{
  const greet = (name) => console.log(`Hello, ${name}!`);
}
// Если тело функции возвращает одно выражение, можно опустить фигурные скобки и слово return:

{
  const square = (x) => x * x;
  console.log(square(5)); // Выведет: 25
}
// Ключевые различия между обычными и стрелочными функциями
// Ключевое слово this:

// У обычных функций this зависит от того, как вызвана функция.

{
  const obj = {
    name: "Object",
    regularFunction: function () {
      console.log(this.name);
    },
  };
  obj.regularFunction(); // Выведет: "Object"
}
// У стрелочных функций this не меняется — оно берётся из окружения, где функция была создана.

{
  const obj = {
    name: "Object",
    arrowFunction: () => {
      console.log(this.name);
    },
  };
  obj.arrowFunction(); // Выведет: undefined (берётся глобальное `this`)
}
// Использование как методы:

// Стрелочные функции не подходят для методов объектов, так как у них нет собственного this.
// Синтаксис:

// Стрелочные функции компактнее, особенно для коротких функций.
// Поддержка arguments:

// Обычные функции имеют доступ к специальной переменной arguments (массивоподобный объект, содержащий все переданные аргументы).
// У стрелочных функций её нет, но можно использовать оператор ... (rest):

{
  function regularFunction() {
    console.log(arguments);
  }
  const arrowFunction = (...args) => {
    console.log(args);
  };
  regularFunction(1, 2, 3); // [1, 2, 3]
  arrowFunction(1, 2, 3); // [1, 2, 3]
}
// Когда использовать?
// Обычные функции: когда нужно работать с this, создавать методы объектов или использовать arguments.
// Стрелочные функции: для компактных, анонимных функций, особенно как коллбэки:

{
  const numbers = [1, 2, 3];
  const squares = numbers.map((num) => num * num);
  console.log(squares); // [1, 4, 9]
}
